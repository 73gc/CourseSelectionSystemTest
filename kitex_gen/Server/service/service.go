// Code generated by Kitex v0.3.2. DO NOT EDIT.

package service

import (
	"context"
	server0 "courseselection/kitex_gen/Server"
	"github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return serviceServiceInfo
}

var serviceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "Service"
	handlerType := (*server0.Service)(nil)
	methods := map[string]kitex.MethodInfo{
		"Login":                  kitex.NewMethodInfo(loginHandler, newServiceLoginArgs, newServiceLoginResult, false),
		"ChangePassword":         kitex.NewMethodInfo(changePasswordHandler, newServiceChangePasswordArgs, newServiceChangePasswordResult, false),
		"ShowCourse":             kitex.NewMethodInfo(showCourseHandler, newServiceShowCourseArgs, newServiceShowCourseResult, false),
		"SelectCourse":           kitex.NewMethodInfo(selectCourseHandler, newServiceSelectCourseArgs, newServiceSelectCourseResult, false),
		"QueryScore":             kitex.NewMethodInfo(queryScoreHandler, newServiceQueryScoreArgs, newServiceQueryScoreResult, false),
		"QuerySelection":         kitex.NewMethodInfo(querySelectionHandler, newServiceQuerySelectionArgs, newServiceQuerySelectionResult, false),
		"EvaluateRequest":        kitex.NewMethodInfo(evaluateRequestHandler, newServiceEvaluateRequestArgs, newServiceEvaluateRequestResult, false),
		"ShowCourseToTeacher":    kitex.NewMethodInfo(showCourseToTeacherHandler, newServiceShowCourseToTeacherArgs, newServiceShowCourseToTeacherResult, false),
		"ShowStudentInfo":        kitex.NewMethodInfo(showStudentInfoHandler, newServiceShowStudentInfoArgs, newServiceShowStudentInfoResult, false),
		"InputScore":             kitex.NewMethodInfo(inputScoreHandler, newServiceInputScoreArgs, newServiceInputScoreResult, false),
		"ModifyShowCourse":       kitex.NewMethodInfo(modifyShowCourseHandler, newServiceModifyShowCourseArgs, newServiceModifyShowCourseResult, false),
		"ModifyShowStudent":      kitex.NewMethodInfo(modifyShowStudentHandler, newServiceModifyShowStudentArgs, newServiceModifyShowStudentResult, false),
		"ModifyScore":            kitex.NewMethodInfo(modifyScoreHandler, newServiceModifyScoreArgs, newServiceModifyScoreResult, false),
		"QueryCourse":            kitex.NewMethodInfo(queryCourseHandler, newServiceQueryCourseArgs, newServiceQueryCourseResult, false),
		"ShowStudentScore":       kitex.NewMethodInfo(showStudentScoreHandler, newServiceShowStudentScoreArgs, newServiceShowStudentScoreResult, false),
		"ShowCourseSelection":    kitex.NewMethodInfo(showCourseSelectionHandler, newServiceShowCourseSelectionArgs, newServiceShowCourseSelectionResult, false),
		"StudentCourseSelection": kitex.NewMethodInfo(studentCourseSelectionHandler, newServiceStudentCourseSelectionArgs, newServiceStudentCourseSelectionResult, false),
		"QueryStudentInfo":       kitex.NewMethodInfo(queryStudentInfoHandler, newServiceQueryStudentInfoArgs, newServiceQueryStudentInfoResult, false),
		"QueryTeacherInfo":       kitex.NewMethodInfo(queryTeacherInfoHandler, newServiceQueryTeacherInfoArgs, newServiceQueryTeacherInfoResult, false),
		"QueryCourseInfo":        kitex.NewMethodInfo(queryCourseInfoHandler, newServiceQueryCourseInfoArgs, newServiceQueryCourseInfoResult, false),
		"AddStudent":             kitex.NewMethodInfo(addStudentHandler, newServiceAddStudentArgs, newServiceAddStudentResult, false),
		"DeleteStudent":          kitex.NewMethodInfo(deleteStudentHandler, newServiceDeleteStudentArgs, newServiceDeleteStudentResult, false),
		"AddTeacher":             kitex.NewMethodInfo(addTeacherHandler, newServiceAddTeacherArgs, newServiceAddTeacherResult, false),
		"DeleteTeacher":          kitex.NewMethodInfo(deleteTeacherHandler, newServiceDeleteTeacherArgs, newServiceDeleteTeacherResult, false),
		"AddCourse":              kitex.NewMethodInfo(addCourseHandler, newServiceAddCourseArgs, newServiceAddCourseResult, false),
		"DeleteCourse":           kitex.NewMethodInfo(deleteCourseHandler, newServiceDeleteCourseArgs, newServiceDeleteCourseResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "server",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.3.2",
		Extra:           extra,
	}
	return svcInfo
}

func loginHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*server0.ServiceLoginArgs)
	realResult := result.(*server0.ServiceLoginResult)
	success, err := handler.(server0.Service).Login(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newServiceLoginArgs() interface{} {
	return server0.NewServiceLoginArgs()
}

func newServiceLoginResult() interface{} {
	return server0.NewServiceLoginResult()
}

func changePasswordHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*server0.ServiceChangePasswordArgs)
	realResult := result.(*server0.ServiceChangePasswordResult)
	success, err := handler.(server0.Service).ChangePassword(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newServiceChangePasswordArgs() interface{} {
	return server0.NewServiceChangePasswordArgs()
}

func newServiceChangePasswordResult() interface{} {
	return server0.NewServiceChangePasswordResult()
}

func showCourseHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*server0.ServiceShowCourseArgs)
	realResult := result.(*server0.ServiceShowCourseResult)
	success, err := handler.(server0.Service).ShowCourse(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newServiceShowCourseArgs() interface{} {
	return server0.NewServiceShowCourseArgs()
}

func newServiceShowCourseResult() interface{} {
	return server0.NewServiceShowCourseResult()
}

func selectCourseHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*server0.ServiceSelectCourseArgs)
	realResult := result.(*server0.ServiceSelectCourseResult)
	success, err := handler.(server0.Service).SelectCourse(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newServiceSelectCourseArgs() interface{} {
	return server0.NewServiceSelectCourseArgs()
}

func newServiceSelectCourseResult() interface{} {
	return server0.NewServiceSelectCourseResult()
}

func queryScoreHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*server0.ServiceQueryScoreArgs)
	realResult := result.(*server0.ServiceQueryScoreResult)
	success, err := handler.(server0.Service).QueryScore(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newServiceQueryScoreArgs() interface{} {
	return server0.NewServiceQueryScoreArgs()
}

func newServiceQueryScoreResult() interface{} {
	return server0.NewServiceQueryScoreResult()
}

func querySelectionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*server0.ServiceQuerySelectionArgs)
	realResult := result.(*server0.ServiceQuerySelectionResult)
	success, err := handler.(server0.Service).QuerySelection(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newServiceQuerySelectionArgs() interface{} {
	return server0.NewServiceQuerySelectionArgs()
}

func newServiceQuerySelectionResult() interface{} {
	return server0.NewServiceQuerySelectionResult()
}

func evaluateRequestHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*server0.ServiceEvaluateRequestArgs)
	realResult := result.(*server0.ServiceEvaluateRequestResult)
	success, err := handler.(server0.Service).EvaluateRequest(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newServiceEvaluateRequestArgs() interface{} {
	return server0.NewServiceEvaluateRequestArgs()
}

func newServiceEvaluateRequestResult() interface{} {
	return server0.NewServiceEvaluateRequestResult()
}

func showCourseToTeacherHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*server0.ServiceShowCourseToTeacherArgs)
	realResult := result.(*server0.ServiceShowCourseToTeacherResult)
	success, err := handler.(server0.Service).ShowCourseToTeacher(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newServiceShowCourseToTeacherArgs() interface{} {
	return server0.NewServiceShowCourseToTeacherArgs()
}

func newServiceShowCourseToTeacherResult() interface{} {
	return server0.NewServiceShowCourseToTeacherResult()
}

func showStudentInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*server0.ServiceShowStudentInfoArgs)
	realResult := result.(*server0.ServiceShowStudentInfoResult)
	success, err := handler.(server0.Service).ShowStudentInfo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newServiceShowStudentInfoArgs() interface{} {
	return server0.NewServiceShowStudentInfoArgs()
}

func newServiceShowStudentInfoResult() interface{} {
	return server0.NewServiceShowStudentInfoResult()
}

func inputScoreHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*server0.ServiceInputScoreArgs)
	realResult := result.(*server0.ServiceInputScoreResult)
	success, err := handler.(server0.Service).InputScore(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newServiceInputScoreArgs() interface{} {
	return server0.NewServiceInputScoreArgs()
}

func newServiceInputScoreResult() interface{} {
	return server0.NewServiceInputScoreResult()
}

func modifyShowCourseHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*server0.ServiceModifyShowCourseArgs)
	realResult := result.(*server0.ServiceModifyShowCourseResult)
	success, err := handler.(server0.Service).ModifyShowCourse(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newServiceModifyShowCourseArgs() interface{} {
	return server0.NewServiceModifyShowCourseArgs()
}

func newServiceModifyShowCourseResult() interface{} {
	return server0.NewServiceModifyShowCourseResult()
}

func modifyShowStudentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*server0.ServiceModifyShowStudentArgs)
	realResult := result.(*server0.ServiceModifyShowStudentResult)
	success, err := handler.(server0.Service).ModifyShowStudent(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newServiceModifyShowStudentArgs() interface{} {
	return server0.NewServiceModifyShowStudentArgs()
}

func newServiceModifyShowStudentResult() interface{} {
	return server0.NewServiceModifyShowStudentResult()
}

func modifyScoreHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*server0.ServiceModifyScoreArgs)
	realResult := result.(*server0.ServiceModifyScoreResult)
	success, err := handler.(server0.Service).ModifyScore(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newServiceModifyScoreArgs() interface{} {
	return server0.NewServiceModifyScoreArgs()
}

func newServiceModifyScoreResult() interface{} {
	return server0.NewServiceModifyScoreResult()
}

func queryCourseHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*server0.ServiceQueryCourseArgs)
	realResult := result.(*server0.ServiceQueryCourseResult)
	success, err := handler.(server0.Service).QueryCourse(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newServiceQueryCourseArgs() interface{} {
	return server0.NewServiceQueryCourseArgs()
}

func newServiceQueryCourseResult() interface{} {
	return server0.NewServiceQueryCourseResult()
}

func showStudentScoreHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*server0.ServiceShowStudentScoreArgs)
	realResult := result.(*server0.ServiceShowStudentScoreResult)
	success, err := handler.(server0.Service).ShowStudentScore(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newServiceShowStudentScoreArgs() interface{} {
	return server0.NewServiceShowStudentScoreArgs()
}

func newServiceShowStudentScoreResult() interface{} {
	return server0.NewServiceShowStudentScoreResult()
}

func showCourseSelectionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*server0.ServiceShowCourseSelectionArgs)
	realResult := result.(*server0.ServiceShowCourseSelectionResult)
	success, err := handler.(server0.Service).ShowCourseSelection(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newServiceShowCourseSelectionArgs() interface{} {
	return server0.NewServiceShowCourseSelectionArgs()
}

func newServiceShowCourseSelectionResult() interface{} {
	return server0.NewServiceShowCourseSelectionResult()
}

func studentCourseSelectionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*server0.ServiceStudentCourseSelectionArgs)
	realResult := result.(*server0.ServiceStudentCourseSelectionResult)
	success, err := handler.(server0.Service).StudentCourseSelection(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newServiceStudentCourseSelectionArgs() interface{} {
	return server0.NewServiceStudentCourseSelectionArgs()
}

func newServiceStudentCourseSelectionResult() interface{} {
	return server0.NewServiceStudentCourseSelectionResult()
}

func queryStudentInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {

	realResult := result.(*server0.ServiceQueryStudentInfoResult)
	success, err := handler.(server0.Service).QueryStudentInfo(ctx)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newServiceQueryStudentInfoArgs() interface{} {
	return server0.NewServiceQueryStudentInfoArgs()
}

func newServiceQueryStudentInfoResult() interface{} {
	return server0.NewServiceQueryStudentInfoResult()
}

func queryTeacherInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {

	realResult := result.(*server0.ServiceQueryTeacherInfoResult)
	success, err := handler.(server0.Service).QueryTeacherInfo(ctx)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newServiceQueryTeacherInfoArgs() interface{} {
	return server0.NewServiceQueryTeacherInfoArgs()
}

func newServiceQueryTeacherInfoResult() interface{} {
	return server0.NewServiceQueryTeacherInfoResult()
}

func queryCourseInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {

	realResult := result.(*server0.ServiceQueryCourseInfoResult)
	success, err := handler.(server0.Service).QueryCourseInfo(ctx)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newServiceQueryCourseInfoArgs() interface{} {
	return server0.NewServiceQueryCourseInfoArgs()
}

func newServiceQueryCourseInfoResult() interface{} {
	return server0.NewServiceQueryCourseInfoResult()
}

func addStudentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*server0.ServiceAddStudentArgs)
	realResult := result.(*server0.ServiceAddStudentResult)
	success, err := handler.(server0.Service).AddStudent(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newServiceAddStudentArgs() interface{} {
	return server0.NewServiceAddStudentArgs()
}

func newServiceAddStudentResult() interface{} {
	return server0.NewServiceAddStudentResult()
}

func deleteStudentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*server0.ServiceDeleteStudentArgs)
	realResult := result.(*server0.ServiceDeleteStudentResult)
	success, err := handler.(server0.Service).DeleteStudent(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newServiceDeleteStudentArgs() interface{} {
	return server0.NewServiceDeleteStudentArgs()
}

func newServiceDeleteStudentResult() interface{} {
	return server0.NewServiceDeleteStudentResult()
}

func addTeacherHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*server0.ServiceAddTeacherArgs)
	realResult := result.(*server0.ServiceAddTeacherResult)
	success, err := handler.(server0.Service).AddTeacher(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newServiceAddTeacherArgs() interface{} {
	return server0.NewServiceAddTeacherArgs()
}

func newServiceAddTeacherResult() interface{} {
	return server0.NewServiceAddTeacherResult()
}

func deleteTeacherHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*server0.ServiceDeleteTeacherArgs)
	realResult := result.(*server0.ServiceDeleteTeacherResult)
	success, err := handler.(server0.Service).DeleteTeacher(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newServiceDeleteTeacherArgs() interface{} {
	return server0.NewServiceDeleteTeacherArgs()
}

func newServiceDeleteTeacherResult() interface{} {
	return server0.NewServiceDeleteTeacherResult()
}

func addCourseHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*server0.ServiceAddCourseArgs)
	realResult := result.(*server0.ServiceAddCourseResult)
	success, err := handler.(server0.Service).AddCourse(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newServiceAddCourseArgs() interface{} {
	return server0.NewServiceAddCourseArgs()
}

func newServiceAddCourseResult() interface{} {
	return server0.NewServiceAddCourseResult()
}

func deleteCourseHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*server0.ServiceDeleteCourseArgs)
	realResult := result.(*server0.ServiceDeleteCourseResult)
	success, err := handler.(server0.Service).DeleteCourse(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newServiceDeleteCourseArgs() interface{} {
	return server0.NewServiceDeleteCourseArgs()
}

func newServiceDeleteCourseResult() interface{} {
	return server0.NewServiceDeleteCourseResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Login(ctx context.Context, req *server0.LoginRequest) (r *server0.LoginResponse, err error) {
	var _args server0.ServiceLoginArgs
	_args.Req = req
	var _result server0.ServiceLoginResult
	if err = p.c.Call(ctx, "Login", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ChangePassword(ctx context.Context, req *server0.ChangePasswordRequenst) (r *server0.ChangePasswordReponse, err error) {
	var _args server0.ServiceChangePasswordArgs
	_args.Req = req
	var _result server0.ServiceChangePasswordResult
	if err = p.c.Call(ctx, "ChangePassword", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ShowCourse(ctx context.Context, req *server0.StudentShowCourseRequest) (r *server0.StudentShowCourseReponse, err error) {
	var _args server0.ServiceShowCourseArgs
	_args.Req = req
	var _result server0.ServiceShowCourseResult
	if err = p.c.Call(ctx, "ShowCourse", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SelectCourse(ctx context.Context, req *server0.SelectCourseRequest) (r *server0.SelectCourseResponse, err error) {
	var _args server0.ServiceSelectCourseArgs
	_args.Req = req
	var _result server0.ServiceSelectCourseResult
	if err = p.c.Call(ctx, "SelectCourse", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) QueryScore(ctx context.Context, req *server0.StudentQueryScoreRequest) (r *server0.StudentQueryScoreResponse, err error) {
	var _args server0.ServiceQueryScoreArgs
	_args.Req = req
	var _result server0.ServiceQueryScoreResult
	if err = p.c.Call(ctx, "QueryScore", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) QuerySelection(ctx context.Context, req *server0.StudentQuerySelectionRequest) (r *server0.StudentQuerySelectionResponse, err error) {
	var _args server0.ServiceQuerySelectionArgs
	_args.Req = req
	var _result server0.ServiceQuerySelectionResult
	if err = p.c.Call(ctx, "QuerySelection", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EvaluateRequest(ctx context.Context, req *server0.StudentEvaluateRequest) (r *server0.StudentEvaluateResponse, err error) {
	var _args server0.ServiceEvaluateRequestArgs
	_args.Req = req
	var _result server0.ServiceEvaluateRequestResult
	if err = p.c.Call(ctx, "EvaluateRequest", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ShowCourseToTeacher(ctx context.Context, req *server0.TeacherQueryCourseRequest) (r *server0.TeacherQueryCourseResponse, err error) {
	var _args server0.ServiceShowCourseToTeacherArgs
	_args.Req = req
	var _result server0.ServiceShowCourseToTeacherResult
	if err = p.c.Call(ctx, "ShowCourseToTeacher", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ShowStudentInfo(ctx context.Context, req *server0.ShowStudentInfoRequest) (r *server0.ShowStudentInfoResponse, err error) {
	var _args server0.ServiceShowStudentInfoArgs
	_args.Req = req
	var _result server0.ServiceShowStudentInfoResult
	if err = p.c.Call(ctx, "ShowStudentInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) InputScore(ctx context.Context, req *server0.TeacherInputScoreRequest) (r *server0.TeacherInputScoreResponse, err error) {
	var _args server0.ServiceInputScoreArgs
	_args.Req = req
	var _result server0.ServiceInputScoreResult
	if err = p.c.Call(ctx, "InputScore", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ModifyShowCourse(ctx context.Context, req *server0.TeacherQueryCourseRequest) (r *server0.TeacherQueryCourseResponse, err error) {
	var _args server0.ServiceModifyShowCourseArgs
	_args.Req = req
	var _result server0.ServiceModifyShowCourseResult
	if err = p.c.Call(ctx, "ModifyShowCourse", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ModifyShowStudent(ctx context.Context, req *server0.ShowStudentInfoRequest) (r *server0.ShowStudentInfoResponse, err error) {
	var _args server0.ServiceModifyShowStudentArgs
	_args.Req = req
	var _result server0.ServiceModifyShowStudentResult
	if err = p.c.Call(ctx, "ModifyShowStudent", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ModifyScore(ctx context.Context, req *server0.TeacherModifyScoreRequest) (r *server0.TeacherModifyScoreResponse, err error) {
	var _args server0.ServiceModifyScoreArgs
	_args.Req = req
	var _result server0.ServiceModifyScoreResult
	if err = p.c.Call(ctx, "ModifyScore", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) QueryCourse(ctx context.Context, req *server0.TeacherQueryCourseRequest) (r *server0.TeacherQueryCourseResponse, err error) {
	var _args server0.ServiceQueryCourseArgs
	_args.Req = req
	var _result server0.ServiceQueryCourseResult
	if err = p.c.Call(ctx, "QueryCourse", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ShowStudentScore(ctx context.Context, req *server0.ShowStudentInfoRequest) (r *server0.ShowStudentInfoResponse, err error) {
	var _args server0.ServiceShowStudentScoreArgs
	_args.Req = req
	var _result server0.ServiceShowStudentScoreResult
	if err = p.c.Call(ctx, "ShowStudentScore", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ShowCourseSelection(ctx context.Context, req *server0.TeacherQueryCourseRequest) (r *server0.TeacherQueryCourseResponse, err error) {
	var _args server0.ServiceShowCourseSelectionArgs
	_args.Req = req
	var _result server0.ServiceShowCourseSelectionResult
	if err = p.c.Call(ctx, "ShowCourseSelection", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) StudentCourseSelection(ctx context.Context, req *server0.ShowStudentInfoRequest) (r *server0.ShowStudentInfoResponse, err error) {
	var _args server0.ServiceStudentCourseSelectionArgs
	_args.Req = req
	var _result server0.ServiceStudentCourseSelectionResult
	if err = p.c.Call(ctx, "StudentCourseSelection", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) QueryStudentInfo(ctx context.Context) (r *server0.AdminQueryStudentInfoResponse, err error) {
	var _args server0.ServiceQueryStudentInfoArgs
	var _result server0.ServiceQueryStudentInfoResult
	if err = p.c.Call(ctx, "QueryStudentInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) QueryTeacherInfo(ctx context.Context) (r *server0.AdminQueryTeacherInfoResponse, err error) {
	var _args server0.ServiceQueryTeacherInfoArgs
	var _result server0.ServiceQueryTeacherInfoResult
	if err = p.c.Call(ctx, "QueryTeacherInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) QueryCourseInfo(ctx context.Context) (r *server0.AdminQueryCourseInfoResponse, err error) {
	var _args server0.ServiceQueryCourseInfoArgs
	var _result server0.ServiceQueryCourseInfoResult
	if err = p.c.Call(ctx, "QueryCourseInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AddStudent(ctx context.Context, req *server0.AdminAddStudentInfoRequest) (r *server0.AdminAddStudentInfoResponse, err error) {
	var _args server0.ServiceAddStudentArgs
	_args.Req = req
	var _result server0.ServiceAddStudentResult
	if err = p.c.Call(ctx, "AddStudent", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteStudent(ctx context.Context, req *server0.AdminDeleteStudentInfoRequest) (r *server0.AdminDeleteStudentInfoResponse, err error) {
	var _args server0.ServiceDeleteStudentArgs
	_args.Req = req
	var _result server0.ServiceDeleteStudentResult
	if err = p.c.Call(ctx, "DeleteStudent", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AddTeacher(ctx context.Context, req *server0.AdminAddTeacherInfoRequest) (r *server0.AdminAddTeacherInfoResponse, err error) {
	var _args server0.ServiceAddTeacherArgs
	_args.Req = req
	var _result server0.ServiceAddTeacherResult
	if err = p.c.Call(ctx, "AddTeacher", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteTeacher(ctx context.Context, req *server0.AdminDeleteTeacherInfoRequest) (r *server0.AdminDeleteStudentInfoResponse, err error) {
	var _args server0.ServiceDeleteTeacherArgs
	_args.Req = req
	var _result server0.ServiceDeleteTeacherResult
	if err = p.c.Call(ctx, "DeleteTeacher", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AddCourse(ctx context.Context, req *server0.AdminAddCourseInfoRequest) (r *server0.AdminAddCourseInfoResponse, err error) {
	var _args server0.ServiceAddCourseArgs
	_args.Req = req
	var _result server0.ServiceAddCourseResult
	if err = p.c.Call(ctx, "AddCourse", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteCourse(ctx context.Context, req *server0.AdminDeleteCourseInfoRequest) (r *server0.AdminDeleteCourseInfoResponse, err error) {
	var _args server0.ServiceDeleteCourseArgs
	_args.Req = req
	var _result server0.ServiceDeleteCourseResult
	if err = p.c.Call(ctx, "DeleteCourse", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
